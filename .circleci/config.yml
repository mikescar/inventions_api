version: 2
machine:
  services:
    - docker
jobs:
  build:
    docker: # run the steps with Docker
      - image: mikescar/heroku-ruby-2.5:latest
        environment:
          RAILS_ENV: test
          DATABASE_URL_TEST: postgres://postgres@localhost:5432/postgres
      - image: postgres:10.4
    steps:
      - checkout # git checkout to working directory

      # Restore bundle cache
      - restore_cache:
          keys:
            - ruby-2.5.1-bundle-{{ checksum "Gemfile.lock" }}

      - run:
          name: Bundle Install
          command: bundle check || bundle install --path vendor/bundle

      - run:
          name: Make test results directory
          command: mkdir ~/rspec

      # Store bundle cache
      - save_cache:
          key: ruby-2.5.1-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle

      - run:
          name: Wait for postgres image
          command: |
            TIMEOUT=10
            until psql $DATABASE_URL_TEST "select 1" > /dev/null 2>&1 || [ $TIMEOUT -eq 0 ]; do
              echo "Waiting for postgres server, $((TIMEOUT--)) remaining attempts..."
              sleep 1
            done

      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace

      - run:
          name: Run rspec
          command: bundle exec rspec --format progress --format RspecJunitFormatter -o ~/rspec/rspec.xml
          when: always

      - store_test_results:
          path: ~/rspec
  deploy:
    docker:
      - image: mikescar/heroku-ruby-2.5:latest
    steps:
      - checkout
      - setup_remote_docker

      # TODO why is this not using primary image that already has Docker?
      # (if leave this step out docker is not found)
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

      - run:
          name: Build docker image
          command: |
            export SOURCE_IMAGE="${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
            docker build --rm=false -t $SOURCE_IMAGE .

      - run:
          name: Push to Heroku Container Registry
          command: ./bin/heroku/docker-push.sh $SOURCE_IMAGE

      - run:
          name: Push to AWS EC2 Container Registry
          command: ./bin/aws/docker-push-to-ecr.sh $SOURCE_IMAGE

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
