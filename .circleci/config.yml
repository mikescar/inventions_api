version: 2
machine:
  services:
    - docker
jobs:
  build:
    docker:
      # run the steps within this image & env
      - image: mikescar/heroku-ruby-2.5:latest
        environment:
          RAILS_ENV: test
          DATABASE_URL_TEST: postgres://postgres@localhost:5432/postgres
      - image: postgres:10.4
    steps:
      - checkout

      # Restore bundle cache
      - restore_cache:
          key: ruby-2.5.1-bundle-v2-{{ checksum "Gemfile.lock" }}

      - run:
          name: Bundle Install
          command: |
            echo "gem: --no-document" >> ~/.gemrc
            gem install bundler --minimal-deps
            bundle install --jobs 10 --retry 5 --path ./vendor/bundle

      - run:
          name: Make test results directory
          command: mkdir ~/rspec

      - save_cache:
          key: ruby-2.5.1-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle

      - run:
          name: Wait for postgres image
          command: |
            TIMEOUT=10
            until psql $DATABASE_URL_TEST "select 1" > /dev/null 2>&1 || [ $TIMEOUT -eq 0 ]; do
              echo "Waiting for postgres server, $((TIMEOUT--)) remaining attempts..."
              sleep 1
            done

      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace

      - run:
          name: Run rspec
          command: bundle exec rspec --format progress --format RspecJunitFormatter -o ~/rspec/rspec.xml
          when: always

      - store_test_results:
          path: ~/rspec

  deploy:
    docker:
      - image: mikescar/heroku-ruby-2.5:latest
    steps:
      - setup_remote_docker

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

      - checkout

      - restore_cache:
          key: ruby-2.5.1-bundle-v2-{{ checksum "Gemfile.lock" }}

      # https://circleci.com/docs/2.0/env-vars/#using-bash_env-to-set-environment-variables
      - run:
          name: Set tag version & RAILS_ENV
          command:
            echo 'export SOURCE_IMAGE="${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"' >> $BASH_ENV
            echo 'export RAILS_ENV=production' >> $BASH_ENV

      - run:
          name: Build docker image
          command:
            docker build --rm=false -t $SOURCE_IMAGE .

      - run:
          name: Push to Heroku Container Registry
          command: ./bin/heroku/docker-push.sh $SOURCE_IMAGE

      - run:
          name: Push to AWS EC2 Container Registry
          command: ./bin/aws/docker-push-to-ecr.sh $SOURCE_IMAGE

      - run:
          name: Push to Azure Container Registry
          command: ./bin/azure/docker-push.sh $SOURCE_IMAGE

  deploy_to_gcp:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout

      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GCLOUD_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GCLOUD_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GCLOUD_CLUSTER_NAME}

      - setup_remote_docker

      - run:
          name: Docker build and push to Google Container Registry
          command: |
            docker build \
              --build-arg COMMIT_HASH=${CIRCLE_SHA1} \
              --build-arg BRANCH=${CIRCLE_BRANCH} \
              --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
              -t ${APP_NAME_PRODUCTION} .
            docker tag ${APP_NAME_PRODUCTION} ${GCLOUD_REGISTRY_DOMAIN}/${GCLOUD_PROJECT_ID}/${APP_NAME_PRODUCTION}:${CIRCLE_SHA1}
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${GCLOUD_REGISTRY_DOMAIN}
            docker push ${GCLOUD_REGISTRY_DOMAIN}/${GCLOUD_PROJECT_ID}/${APP_NAME_PRODUCTION}:${CIRCLE_SHA1}

      - run:
          name: Deploy to Kubernetes (GKE)
          command: |
            envsubst < project/k8s.yml > patched_k8s.yml
            kubectl apply -f patched_k8s.yml
            kubectl rollout status deployment/${APP_NAME_PRODUCTION}

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
      - deploy_to_gcp:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - gke-cd
